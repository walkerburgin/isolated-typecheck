load("@aspect_rules_js//js:defs.bzl", "js_library", "js_run_binary", "js_run_devserver")
load("@aspect_rules_swc//swc:defs.bzl", "swc")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@bazel_skylib//lib:partial.bzl", "partial")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:vite/package_json.bzl", vite = "bin")

npm_link_all_packages(name = "node_modules")

ts_project(
    name = "typescript",
    srcs = [
        "src/App.tsx",
        "src/main.tsx",
    ],
    deps = [":node_modules"],
    assets = [],
    transpiler = partial.make(swc, swcrc = ".swcrc", out_dir = "dist", root_dir = "src"),

    composite = True,
    incremental = True,
    out_dir = "dist",
    root_dir = "src",
)

vite.vite_binary(name = "vite_binary")

js_run_binary(
    name = "vite",
    tool = ":vite_binary",
    mnemonic = "Vite",
    chdir = "pkgs/foo-app",
    srcs = ["vite.config.mjs", "index.html", ":typescript"] + glob(["ssl/**"]),
    out_dirs = ["bundle"],
    args = ["build", "--config", "vite.config.mjs"],
    include_types = False,
    include_transitive_types = False,
)

js_run_devserver(
    name = "dev",
    tool = ":vite_binary",
    chdir = "pkgs/foo-app",
    data = ["vite.config.mjs", "index.html", ":typescript"] + glob(["ssl/**"]),
    args = ["--config", "vite.config.mjs", "--clearScreen", "false"],
    include_types = False,
    include_transitive_types = False,
)

js_library(
    name = "pkg",
    srcs = [
        "package.json",
        "tsconfig.json",
        ":vite",
    ],
    visibility = ["//visibility:public"],
)
